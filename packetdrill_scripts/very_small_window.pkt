//TCP behavior dealing with a very small window.
// Arnaud Schils, Olivier Bonaventure, 2014

0   socket(..., SOCK_STREAM, IPPROTO_TCP) = 3
+0  setsockopt(3, SOL_SOCKET, SO_REUSEADDR, [1], 4) = 0
+0  bind(3, ..., ...) = 0
+0  listen(3, 1) = 0

//TCP three-way handshake
//Packetdrill advertises small window size
+0  < S 0:0(0) win 1000 <mss 1000>
+0  > S. 0:0(0) ack 1 <...>
+.1 < . 1:1(0) ack 1 win 100
+0  accept(3, ..., ...) = 4
+0 < R. 1:1(0) ack 9 win 4
//Sending less or equal bytes than window size should be fine.
+0 write(4, ..., 1000)= 1000
+0 > P. 1:101(100) ack 1

//Be nice send an ack.
+0 < . 1:1(0) ack 101 win 1000

//Now try with more bytes than window size
+0 write(4, ..., 4000) = 4000



//You should receive the first 4 bytes.
+0 > P. 1001:2001(1000) ack 1 //It's slow! Because kernel has to split in two segments?

//You must ack to free the packetdrill receiving window.
+0 < . 1:1(0) ack 9 win 4

//Kernel should send the last 4 bytes.
+0 > P. 9:13(4) ack 1 //And here it's quick because already fragmented?
+0 < . 1:1(0) ack 13 win 4

//Packetdrill closes connection gracefully
+0 < F. 1:1(0) ack 13 win 4
+0 > . 13:13(0) ack 2

//Kernel closes connection gracefully
+0 close(4) = 0
+0 > F. 13:13(0) ack 2
+0 < . 1:1(0) ack 14 win 4

